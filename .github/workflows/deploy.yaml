name: Deploy MFP Tool App

on:
  push:
    branches:
      - "**" # 監聽所有分支
  workflow_dispatch: # 手動觸發

jobs:
  deploy-main:
    if: github.ref == 'refs/heads/main' # 僅在 main 分支上執行

    runs-on: [self-hosted, ntu]

    env:
      BUILDS_DIR: /home/user/actions-runner-mfp-tool-ai
      ENV: production

    steps:
      - name: Set environment variables
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | sed 's|/|_|g')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          CURRENT_BRANCH_DIR="${BUILDS_DIR}/${BRANCH_NAME}"
          echo "CURRENT_BRANCH_DIR=$CURRENT_BRANCH_DIR" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy codebase to external build directory
        run: |
          DEST_DIR="/home/user/actions-runner-mfp-tool-ai/${BRANCH_NAME}"
          mkdir -p "$CURRENT_BRANCH_DIR"
          cp -rf . "$CURRENT_BRANCH_DIR"

      - name: Clean unused codebase for deleted branches
        working-directory: ${{ github.workspace }}/backend
        run: |
          echo "目前 Codebase 存放目錄 : ${BUILDS_DIR}"
          mkdir -p "${BUILDS_DIR}"
          echo "開始清理已刪除分支對應的 codebase ..."

          EXISTING_BRANCHES=$(git ls-remote --heads origin | awk '{print $2}' | sed 's|refs/heads/||' | sed 's|/|_|g')
          echo -e "目前存在的分支 : \n=====\n$EXISTING_BRANCHES\n====="

          for BRANCH_DIR in ${BUILDS_DIR}/*; do
            echo "檢查 codebase 目錄 : $BRANCH_DIR"

            if ! [ -d "$BRANCH_DIR" ]; then
              echo "$BRANCH_DIR 不是目錄，跳過..."
              continue
            fi

            BRANCH_NAME=$(basename "$BRANCH_DIR")
            
            if echo "$EXISTING_BRANCHES" | grep -q "^$BRANCH_NAME$"; then
              echo "保留 codebase : $BRANCH_DIR（分支仍存在）"
            else
              echo "刪除 codebase : $BRANCH_DIR（分支已刪除）"
              rm -rf "$BRANCH_DIR"
            fi
          done

      - name: Build and Serve Frontend with PM2
        working-directory: ${{ env.CURRENT_BRANCH_DIR }}/frontend
        run: |
          echo "正在啟動前端服務..."
          pm2 delete "NISC_MFPTool_Frontend" --silent || true
          pm2 --name NISC_MFPTool_Frontend start "http-server --proxy http://127.0.4.1:3000? -a 127.0.4.1 -p 3000"
          echo "前端服務啟動成功，埠號為 3000，由 Nginx 將入口 ai.nisc.com.tw/mfp_tool 轉向至 3000。"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Activate Backend .venv and Install Dependencies and Serve Backend via PM2
        working-directory: ${{ env.CURRENT_BRANCH_DIR }}/backend
        run: |
          BACKEND_DIR="${CURRENT_BRANCH_DIR}/backend"
          echo "準備使用 codebase : $BACKEND_DIR"

          VENV_DIR=".venv"

          if [ ! -d "$VENV_DIR" ]; then
            echo "建立新的虛擬環境 : $VENV_DIR"
            virtualenv "$VENV_DIR"
          fi

          echo "正在安裝後端依賴..."
          source "$VENV_DIR/bin/activate"
          pip install -r requirements.txt
          echo "後端依賴安裝完成"

          echo "正在啟動後端服務..."
          pm2 delete "NISC_MFPTool_Backend" || true
          ENV=production pm2 --name NISC_MFPTool_Backend start "uvicorn main:app --host 127.0.4.1 --port 8000"
          echo "後端服務啟動成功，埠號為 8000，由 Nginx 將入口 ai.nisc.com.tw/mfp_tool/api 轉向至 8000。"

      - name: Display post-deploy instructions
        run: |
          echo -e "請執行 'pm2 list' 查看進程狀態，\n\
          然後開啟存取以下網址: \n\
          \033[1;31mhttps://ai.nisc.com.tw/mfp_tool\033[0m\n\
          存取應用程式。"
